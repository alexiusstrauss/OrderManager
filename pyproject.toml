[tool.poetry]
name = "ordermanager"
version = "0.1.0"
description = ""
authors = ["Alexius Strauss"]
license = "Boost Software License"
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.10.10"
django = "^5.0.7"
djangorestframework = "^3.15.2"
psycopg2-binary = "^2.9.9"
django-filter = "^24.2"
gunicorn = "^22.0.0"
django-cors-headers = "^4.4.0"
python-dotenv = "^1.0.1"
black = "^24.4.2"
pylint = "^3.2.6"
ruff = "^0.5.4"
ipython = "^8.26.0"
isort = "^5.13.2"
pytest-django = "^4.8.0"
pytest-cov = "^5.0.0"
pytest = "^8.3.1"
behave = "^1.2.6"
drf-yasg = "^1.21.7"


[tool.black]
line-length = 120
skip-string-normalization = true

[tool.pytest.ini_options]
addopts = "--maxfail=3 --color=yes -vv"
testpaths = ["tests"]
filterwarnings = [
    "ignore::Warning"
]

[tool.coverage.run]
omit = [
    "*/migrations/*",
    "*/settings/*",
    "*migrations*",
    "*alembic*",
    "*tests*",
    "*test_*",
    "*apps.py*",
    "*database.py*",
    "*security.py*",
    "*config.py*",
    "*admin.py*",
    "main.py",
    "__init__.py"
]
source = ["backend/"]
data_file = ".coverage"

[tool.coverage.report]
fail_under = 50
show_missing = true
skip_covered = false
sort = "Cover"

[tool.ruff]
exclude = [".vscode", "migrations", "settings.py", ".pytest_cache", "test_*"]
preview = true
line-length = 120

[tool.ruff.lint]
select = ['I', 'F', 'E', 'W', 'PL', 'PT']

[tool.pylint.master]
ignore = ".vscode, migrations, settings.py, .pytest_cache"
persistent = true
cache-size = 500

[tool.pylint.messages_control]
disable = [
    "W0613",
    "C0114",
    "C0415",
    "E0015",
    "C0116",
    "C0115",
    "W1401",
    "E1121",
    "C0103",
    "E1101",
    "W0212",
    "C0301",
    "E0402",
    "W0401",
    "W0614",
    "E1137",
    "E1136",
    "W0621",
    "W0718"
]

[tool.pylint.reports]
output-format = "colorized"
include-ids = true
files-output = false
reports = true
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
comment = false

[tool.pylint.variables]
init-import = false
dummy-variables-rgx = "_"
additional-builtins = ""

[tool.pylint.typecheck]
ignore-mixin-members = true
zope = false
acquired-members = "REQUEST,acl_users,aq_parent"

[tool.pylint.basic]
required-attributes = ""
no-docstring-rgx = "__.*__"
module-rgx = "(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
const-rgx = "(([A-Z_][A-Z1-9_]*)|(__.*__))$"
class-rgx = "[A-Z_][a-zA-Z0-9]+$"
function-rgx = "[a-z_][a-z0-9_]{2,60}$"
method-rgx = "[a-z_][a-z0-9_]{2,60}$"
attr-rgx = "[a-z_][a-z0-9_]{2,30}$"
argument-rgx = "[a-z_][a-z0-9_]{2,30}$"
variable-rgx = "[a-z_][a-z0-9_]{2,30}$"
inlinevar-rgx = "[A-Za-z_][A-Za-z0-9_]*$"
good-names = "i,j,k,ex,Run,_"
bad-names = "foo,bar,baz,toto,tutu,tata,temp,tmp"
bad-functions = "apply,input,exec"

[tool.pylint.design]
max-args = 10
max-locals = 30
max-returns = 12
max-branchs = 15
max-statements = 60
max-parents = 20
max-attributes = 25
min-public-methods = 0
max-public-methods = 25

[tool.pylint.imports]
deprecated-modules = "regsub,string,TERMIOS,Bastion,rexec"
import-graph = ""
ext-import-graph = ""
int-import-graph = ""

[tool.pylint.classes]
exclude-protected = "_asdict,_fields,_replace,_source,_make"
ignore-iface-methods = "isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by"
defining-attr-methods = "__init__,__new__,setUp"

[tool.pylint.similarities]
min-similarity-lines = 10
ignore-comments = true
ignore-docstrings = true

[tool.pylint.miscellaneous]
notes = "FIXME,XXX,TODO,HACK,OPTIMIZE,NOTE"

[tool.pylint.format]
max-line-length = 120
max-module-lines = 500
indent-string = "    "

[tool.isort]
profile = "black"
line_length = 120



[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
